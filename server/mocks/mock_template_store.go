// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/server (interfaces: TemplateStore)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_template_store.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/server TemplateStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	template "github.com/kdwils/envoy-proxy-bouncer/template"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateStore is a mock of TemplateStore interface.
type MockTemplateStore struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateStoreMockRecorder
	isgomock struct{}
}

// MockTemplateStoreMockRecorder is the mock recorder for MockTemplateStore.
type MockTemplateStoreMockRecorder struct {
	mock *MockTemplateStore
}

// NewMockTemplateStore creates a new mock instance.
func NewMockTemplateStore(ctrl *gomock.Controller) *MockTemplateStore {
	mock := &MockTemplateStore{ctrl: ctrl}
	mock.recorder = &MockTemplateStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateStore) EXPECT() *MockTemplateStoreMockRecorder {
	return m.recorder
}

// RenderCaptcha mocks base method.
func (m *MockTemplateStore) RenderCaptcha(data template.CaptchaTemplateData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderCaptcha", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderCaptcha indicates an expected call of RenderCaptcha.
func (mr *MockTemplateStoreMockRecorder) RenderCaptcha(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderCaptcha", reflect.TypeOf((*MockTemplateStore)(nil).RenderCaptcha), data)
}

// RenderDenied mocks base method.
func (m *MockTemplateStore) RenderDenied(data template.DeniedTemplateData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenderDenied", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderDenied indicates an expected call of RenderDenied.
func (mr *MockTemplateStoreMockRecorder) RenderDenied(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderDenied", reflect.TypeOf((*MockTemplateStore)(nil).RenderDenied), data)
}
