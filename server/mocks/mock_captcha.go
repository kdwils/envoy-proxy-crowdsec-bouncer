// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/server (interfaces: Captcha)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_captcha.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/server Captcha
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	components "github.com/kdwils/envoy-proxy-bouncer/remediation/components"
	gomock "go.uber.org/mock/gomock"
)

// MockCaptcha is a mock of Captcha interface.
type MockCaptcha struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaMockRecorder
	isgomock struct{}
}

// MockCaptchaMockRecorder is the mock recorder for MockCaptcha.
type MockCaptchaMockRecorder struct {
	mock *MockCaptcha
}

// NewMockCaptcha creates a new mock instance.
func NewMockCaptcha(ctrl *gomock.Controller) *MockCaptcha {
	mock := &MockCaptcha{ctrl: ctrl}
	mock.recorder = &MockCaptchaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptcha) EXPECT() *MockCaptchaMockRecorder {
	return m.recorder
}

// DeleteSession mocks base method.
func (m *MockCaptcha) DeleteSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteSession", sessionID)
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockCaptchaMockRecorder) DeleteSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockCaptcha)(nil).DeleteSession), sessionID)
}

// GetProviderName mocks base method.
func (m *MockCaptcha) GetProviderName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProviderName indicates an expected call of GetProviderName.
func (mr *MockCaptchaMockRecorder) GetProviderName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderName", reflect.TypeOf((*MockCaptcha)(nil).GetProviderName))
}

// GetSession mocks base method.
func (m *MockCaptcha) GetSession(sessionID string) (*components.CaptchaSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*components.CaptchaSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockCaptchaMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockCaptcha)(nil).GetSession), sessionID)
}

// StartCleanup mocks base method.
func (m *MockCaptcha) StartCleanup(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCleanup", ctx)
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockCaptchaMockRecorder) StartCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockCaptcha)(nil).StartCleanup), ctx)
}

// VerifyResponse mocks base method.
func (m *MockCaptcha) VerifyResponse(ctx context.Context, req components.VerificationRequest) (*components.VerificationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResponse", ctx, req)
	ret0, _ := ret[0].(*components.VerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyResponse indicates an expected call of VerifyResponse.
func (mr *MockCaptchaMockRecorder) VerifyResponse(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResponse", reflect.TypeOf((*MockCaptcha)(nil).VerifyResponse), ctx, req)
}
