// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/server (interfaces: Bouncer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_bouncer.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/server Bouncer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	authv3 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"
	bouncer "github.com/kdwils/envoy-proxy-bouncer/bouncer"
	gomock "go.uber.org/mock/gomock"
)

// MockBouncer is a mock of Bouncer interface.
type MockBouncer struct {
	ctrl     *gomock.Controller
	recorder *MockBouncerMockRecorder
	isgomock struct{}
}

// MockBouncerMockRecorder is the mock recorder for MockBouncer.
type MockBouncerMockRecorder struct {
	mock *MockBouncer
}

// NewMockBouncer creates a new mock instance.
func NewMockBouncer(ctrl *gomock.Controller) *MockBouncer {
	mock := &MockBouncer{ctrl: ctrl}
	mock.recorder = &MockBouncerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBouncer) EXPECT() *MockBouncerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockBouncer) Check(ctx context.Context, req *authv3.CheckRequest) bouncer.CheckedRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, req)
	ret0, _ := ret[0].(bouncer.CheckedRequest)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockBouncerMockRecorder) Check(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockBouncer)(nil).Check), ctx, req)
}

// ExtractRealIPFromHTTP mocks base method.
func (m *MockBouncer) ExtractRealIPFromHTTP(r *http.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractRealIPFromHTTP", r)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractRealIPFromHTTP indicates an expected call of ExtractRealIPFromHTTP.
func (mr *MockBouncerMockRecorder) ExtractRealIPFromHTTP(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractRealIPFromHTTP", reflect.TypeOf((*MockBouncer)(nil).ExtractRealIPFromHTTP), r)
}

// Metrics mocks base method.
func (m *MockBouncer) Metrics(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Metrics indicates an expected call of Metrics.
func (mr *MockBouncerMockRecorder) Metrics(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockBouncer)(nil).Metrics), ctx)
}

// Sync mocks base method.
func (m *MockBouncer) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockBouncerMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBouncer)(nil).Sync), ctx)
}
