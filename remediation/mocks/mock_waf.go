// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/remediation (interfaces: WAF)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_waf.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/remediation WAF
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	components "github.com/kdwils/envoy-proxy-bouncer/remediation/components"
	gomock "go.uber.org/mock/gomock"
)

// MockWAF is a mock of WAF interface.
type MockWAF struct {
	ctrl     *gomock.Controller
	recorder *MockWAFMockRecorder
	isgomock struct{}
}

// MockWAFMockRecorder is the mock recorder for MockWAF.
type MockWAFMockRecorder struct {
	mock *MockWAF
}

// NewMockWAF creates a new mock instance.
func NewMockWAF(ctrl *gomock.Controller) *MockWAF {
	mock := &MockWAF{ctrl: ctrl}
	mock.recorder = &MockWAFMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWAF) EXPECT() *MockWAFMockRecorder {
	return m.recorder
}

// Inspect mocks base method.
func (m *MockWAF) Inspect(ctx context.Context, req components.AppSecRequest) (components.WAFResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", ctx, req)
	ret0, _ := ret[0].(components.WAFResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *MockWAFMockRecorder) Inspect(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*MockWAF)(nil).Inspect), ctx, req)
}
