// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/remediation/components (interfaces: CrowdsecClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_crowdsec_client.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/remediation/components CrowdsecClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	apiclient "github.com/crowdsecurity/crowdsec/pkg/apiclient"
	gomock "go.uber.org/mock/gomock"
)

// MockCrowdsecClient is a mock of CrowdsecClient interface.
type MockCrowdsecClient struct {
	ctrl     *gomock.Controller
	recorder *MockCrowdsecClientMockRecorder
	isgomock struct{}
}

// MockCrowdsecClientMockRecorder is the mock recorder for MockCrowdsecClient.
type MockCrowdsecClientMockRecorder struct {
	mock *MockCrowdsecClient
}

// NewMockCrowdsecClient creates a new mock instance.
func NewMockCrowdsecClient(ctrl *gomock.Controller) *MockCrowdsecClient {
	mock := &MockCrowdsecClient{ctrl: ctrl}
	mock.recorder = &MockCrowdsecClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrowdsecClient) EXPECT() *MockCrowdsecClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCrowdsecClient) Do(ctx context.Context, req *http.Request, v any) (*apiclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req, v)
	ret0, _ := ret[0].(*apiclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockCrowdsecClientMockRecorder) Do(ctx, req, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCrowdsecClient)(nil).Do), ctx, req, v)
}
