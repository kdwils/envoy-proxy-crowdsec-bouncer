// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/pkg/crowdsec (interfaces: CrowdsecClient)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_api_client.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/pkg/crowdsec CrowdsecClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/crowdsecurity/crowdsec/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCrowdsecClient is a mock of CrowdsecClient interface.
type MockCrowdsecClient struct {
	ctrl     *gomock.Controller
	recorder *MockCrowdsecClientMockRecorder
	isgomock struct{}
}

// MockCrowdsecClientMockRecorder is the mock recorder for MockCrowdsecClient.
type MockCrowdsecClientMockRecorder struct {
	mock *MockCrowdsecClient
}

// NewMockCrowdsecClient creates a new mock instance.
func NewMockCrowdsecClient(ctrl *gomock.Controller) *MockCrowdsecClient {
	mock := &MockCrowdsecClient{ctrl: ctrl}
	mock.recorder = &MockCrowdsecClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrowdsecClient) EXPECT() *MockCrowdsecClientMockRecorder {
	return m.recorder
}

// SendMetrics mocks base method.
func (m *MockCrowdsecClient) SendMetrics(ctx context.Context, metrics *models.AllMetrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetrics", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetrics indicates an expected call of SendMetrics.
func (mr *MockCrowdsecClientMockRecorder) SendMetrics(ctx, metrics any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetrics", reflect.TypeOf((*MockCrowdsecClient)(nil).SendMetrics), ctx, metrics)
}
