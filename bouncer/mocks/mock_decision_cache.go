// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/bouncer (interfaces: DecisionCache)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_decision_cache.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/bouncer DecisionCache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/crowdsecurity/crowdsec/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDecisionCache is a mock of DecisionCache interface.
type MockDecisionCache struct {
	ctrl     *gomock.Controller
	recorder *MockDecisionCacheMockRecorder
	isgomock struct{}
}

// MockDecisionCacheMockRecorder is the mock recorder for MockDecisionCache.
type MockDecisionCacheMockRecorder struct {
	mock *MockDecisionCache
}

// NewMockDecisionCache creates a new mock instance.
func NewMockDecisionCache(ctrl *gomock.Controller) *MockDecisionCache {
	mock := &MockDecisionCache{ctrl: ctrl}
	mock.recorder = &MockDecisionCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecisionCache) EXPECT() *MockDecisionCacheMockRecorder {
	return m.recorder
}

// GetDecision mocks base method.
func (m *MockDecisionCache) GetDecision(ctx context.Context, ip string) (*models.Decision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDecision", ctx, ip)
	ret0, _ := ret[0].(*models.Decision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDecision indicates an expected call of GetDecision.
func (mr *MockDecisionCacheMockRecorder) GetDecision(ctx, ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDecision", reflect.TypeOf((*MockDecisionCache)(nil).GetDecision), ctx, ip)
}

// Size mocks base method.
func (m *MockDecisionCache) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockDecisionCacheMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockDecisionCache)(nil).Size))
}

// Sync mocks base method.
func (m *MockDecisionCache) Sync(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockDecisionCacheMockRecorder) Sync(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockDecisionCache)(nil).Sync), ctx)
}
