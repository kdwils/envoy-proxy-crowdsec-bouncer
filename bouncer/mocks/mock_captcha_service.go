// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/envoy-proxy-bouncer/bouncer (interfaces: CaptchaService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_captcha_service.go -package=mocks github.com/kdwils/envoy-proxy-bouncer/bouncer CaptchaService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	components "github.com/kdwils/envoy-proxy-bouncer/bouncer/components"
	gomock "go.uber.org/mock/gomock"
)

// MockCaptchaService is a mock of CaptchaService interface.
type MockCaptchaService struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaServiceMockRecorder
	isgomock struct{}
}

// MockCaptchaServiceMockRecorder is the mock recorder for MockCaptchaService.
type MockCaptchaServiceMockRecorder struct {
	mock *MockCaptchaService
}

// NewMockCaptchaService creates a new mock instance.
func NewMockCaptchaService(ctrl *gomock.Controller) *MockCaptchaService {
	mock := &MockCaptchaService{ctrl: ctrl}
	mock.recorder = &MockCaptchaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaService) EXPECT() *MockCaptchaServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockCaptchaService) CreateSession(ip, originalURL string) (*components.CaptchaSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ip, originalURL)
	ret0, _ := ret[0].(*components.CaptchaSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockCaptchaServiceMockRecorder) CreateSession(ip, originalURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockCaptchaService)(nil).CreateSession), ip, originalURL)
}

// GetSession mocks base method.
func (m *MockCaptchaService) GetSession(sessionID string) (*components.CaptchaSession, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionID)
	ret0, _ := ret[0].(*components.CaptchaSession)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockCaptchaServiceMockRecorder) GetSession(sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockCaptchaService)(nil).GetSession), sessionID)
}

// IsEnabled mocks base method.
func (m *MockCaptchaService) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockCaptchaServiceMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockCaptchaService)(nil).IsEnabled))
}

// StartCleanup mocks base method.
func (m *MockCaptchaService) StartCleanup(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCleanup", ctx)
}

// StartCleanup indicates an expected call of StartCleanup.
func (mr *MockCaptchaServiceMockRecorder) StartCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCleanup", reflect.TypeOf((*MockCaptchaService)(nil).StartCleanup), ctx)
}

// VerifyResponse mocks base method.
func (m *MockCaptchaService) VerifyResponse(ctx context.Context, sessionID string, req components.VerificationRequest) (*components.VerificationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyResponse", ctx, sessionID, req)
	ret0, _ := ret[0].(*components.VerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyResponse indicates an expected call of VerifyResponse.
func (mr *MockCaptchaServiceMockRecorder) VerifyResponse(ctx, sessionID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyResponse", reflect.TypeOf((*MockCaptchaService)(nil).VerifyResponse), ctx, sessionID, req)
}
